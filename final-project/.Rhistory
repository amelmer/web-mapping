legend.spacing = unit(0.25, "cm"))
ggplot(chicago_data, aes(x = food_insecurity, y = percent_eligible_no_snap)) +
geom_point(aes(color = area)) +
geom_smooth(method = lm, color = "black") +
scale_x_continuous(name = "Percent of Neighborhood That is Food Insecure",
labels = function(x) paste0(x, "%")) +
# source: https://stackoverflow.com/questions/27433798/how-can-i-change-the-y-axis-figures-into-percentages-in-a-barplot
scale_y_continuous(name = "Percent of SNAP-Eligible in\nNeighborhood That Are Not Enrolled",
labels = function(x) paste0(x, "%")) +
scale_color_brewer(palette = "Dark2", labels = c("The Loop", "The North Side",
"The South Side", "The West Side"),
name = "Area of Chicago", na.translate = F) +
labs(title = "Relationship Between Food Insecurity Rates\nand SNAP Enrollment") +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 9),
plot.title = element_text(size = 13),
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
legend.spacing = unit(0.15, "cm"))
ggplot(chicago_data, aes(x = food_insecurity, y = percent_eligible_no_snap)) +
geom_point(aes(color = area)) +
geom_smooth(method = lm, color = "black") +
scale_x_continuous(name = "Percent of Neighborhood That is Food Insecure",
labels = function(x) paste0(x, "%")) +
# source: https://stackoverflow.com/questions/27433798/how-can-i-change-the-y-axis-figures-into-percentages-in-a-barplot
scale_y_continuous(name = "Percent of SNAP-Eligible in\nNeighborhood That Are Not Enrolled",
labels = function(x) paste0(x, "%")) +
scale_color_brewer(palette = "Dark2", labels = c("The Loop", "The North Side",
"The South Side", "The West Side"),
name = "Area of Chicago", na.translate = F) +
labs(title = "Relationship Between Food Insecurity Rates\nand SNAP Enrollment") +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 9),
plot.title = element_text(size = 13),
legend.text = element_text(size = 9),
legend.title = element_text(size = 11),
legend.spacing = unit(0.15, "mm"))
ggplot(chicago_data, aes(x = food_insecurity, y = percent_eligible_no_snap)) +
geom_point(aes(color = area)) +
geom_smooth(method = lm, color = "black") +
scale_x_continuous(name = "Percent of Neighborhood That is Food Insecure",
labels = function(x) paste0(x, "%")) +
# source: https://stackoverflow.com/questions/27433798/how-can-i-change-the-y-axis-figures-into-percentages-in-a-barplot
scale_y_continuous(name = "Percent of SNAP-Eligible in\nNeighborhood That Are Not Enrolled",
labels = function(x) paste0(x, "%")) +
scale_color_brewer(palette = "Dark2", labels = c("The Loop", "The North Side",
"The South Side", "The West Side"),
name = "Area of Chicago", na.translate = F) +
labs(title = "Relationship Between Food Insecurity Rates\nand SNAP Enrollment") +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 9),
plot.title = element_text(size = 13),
legend.text = element_text(size = 9),
legend.title = element_text(size = 11))
usethis::use_course("MACS40700/vector-maps")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("tidytext")
library(tidytext)
library(ggtext)
library(glue)
#install.packages("ggwordcloud")
library(ggwordcloud)
#install.packages("ggraph")
library(ggraph)
library(igraph)
# set default theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))
# set default figure parameters for knitr
knitr::opts_chunk$set(
fig.width = 8, fig.asp = 0.618, fig.retina = 2, dpi = 150, out.width = "60%"
)
# dplyr print min and max
options(dplyr.print_max = 10, dplyr.print_min = 10)
bigrams <- tweets %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
tweets <- read_csv("text.csv")
tweets_words <- tweets %>%
unnest_tokens(
output = word,    # first argument is output
input = text, # second argument is input
token = "words"   # third argument is token, with default "words"
)
stopwords <- get_stopwords("en")
tweets_words_nostop <- tweets_words %>%
anti_join(stop_words)
tweets_words_nostop %>%
count(word, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(y = fct_reorder(word, n), x = n)) +
geom_col()
bigrams <- tweets %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigrams
bigrams <- tweets %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigrams_separated <- bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!(word1 %in% stop_words$word)) %>%
filter(!(word2 %in% stop_words$word))
bigrams_filtered <- bigrams_separated %>%
filter(!(word1 %in% stop_words$word)) %>%
filter(!(word2 %in% stop_words$word))
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigrams_united %>%
count(bigram, sort = TRUE)
bigrams_united <- bigrams_united %>%
filter(bigram != "NA NA")
bigrams_united %>%
count(bigram, sort = TRUE)
bigrams_united %>%
count(bigram, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(y = fct_reorder(bigram, n), x = n)) +
geom_col(fill = "#BD2D2A") +
labs(
x = "Count", y = NULL,
title = "<span style = 'color:#808080'>Most common bigrams in</span>",
subtitle ="<span style = 'color:#BD2D2A;font-weight:strong'><b>love</b></span> actually"
) +
theme(
plot.title = element_textbox_simple(halign = 1),
plot.subtitle = element_textbox_simple(size = 30, halign = 1),
plot.title.position = "plot"
)
bigrams_united %>%
count(bigram, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(y = fct_reorder(bigram, n), x = n)) +
geom_col(fill = "#BD2D2A") +
labs(
x = "Count", y = NULL,
title = "<span style = 'color:#808080'>Most common bigrams in</span>",
subtitle ="<span style = 'color:#BD2D2A;font-weight:strong'><b>tweets</b></span> ?"
) +
theme(
plot.title = element_textbox_simple(halign = 1),
plot.subtitle = element_textbox_simple(size = 30, halign = 1),
plot.title.position = "plot"
)
shiny::runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/drug law dashboard/drug_laws')
knitr::opts_chunk$set(echo = TRUE)
install.packages("shinydashboard")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("shinydashboard")
library(shinydashboard)
runApp('Documents/data visualization/drug law dashboard/drug_laws')
runApp('Documents/data visualization/baby_names_dashboard')
usethis::use_course("MACS40700/shiny")
runApp('Documents/data visualization/baby_names_dashboard')
runApp('Documents/data visualization/baby_names_dashboard')
shiny::runApp('Documents/GitHub/assignment-4-amelmer/drug_laws_dashboard')
runApp('Documents/GitHub/assignment-4-amelmer/drug_laws_dashboard')
citation("bslib")
runApp('Documents/GitHub/assignment-4-amelmer/drug_laws_dashboard')
library(bslib)
library(shiny)
library(tidyverse)
library(colorspace)
library(ggiraph)
library(shinythemes)
library(bslib)
runApp('Documents/GitHub/assignment-4-amelmer/drug_laws_dashboard')
runApp('Documents/GitHub/assignment-4-amelmer/drug_laws_dashboard')
shiny::runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
runApp('Documents/GitHub/final-project-snap_enrollment/snap_enrollment')
library(tidyverse)
library(sf)
snap_data <- st_read("snap_retailers.json")
setwd("~/Documents/GitHub/web-mapping/final-project")
library(tidyverse)
library(sf)
snap_data <- st_read("snap_retailers.json")
match_retailers <- function(street_number, street_name, address) {
street_name <- gsub("Road", "Rd", street_name)
street_name <- gsub("Avenue", "Ave", street_name)
street_name <- gsub("Expressway", "Expy", street_name)
street_name <- gsub("Street", "St", street_name)
street_name <- gsub("Lane", "Ln", street_name)
street_name <- gsub("Boulevard", "Blvd", street_name)
street_name <- gsub("Highway", "Hwy", street_name)
street_name <- gsub("North", "N", street_name)
street_name <- gsub("South", "S", street_name)
street_name <- gsub("West", "W", street_name)
street_name <- gsub("East", "E", street_name)
print(street_name)
address <- gsub("Road", "Rd", address)
address <- gsub("Avenue", "Ave", address)
address <- gsub("Expressway", "Expy", address)
address <- gsub("Street", "St", address)
address <- gsub("Lane", "Ln", address)
address <- gsub("Boulevard", "Blvd", address)
address <- gsub("Highway", "Hwy", address)
address <- gsub("North", "N", address)
address <- gsub("South", "S", address)
address <- gsub("West", "W", address)
address <- gsub("East", "E", address)
if (c(paste0(street_number, " ", str_to_lower(street_name))) == str_to_lower(address)) {
return(1)
} else {
return(0)
}
}
# iterate over grocery stores
grocery_data <- st_read("groceries.geojson")
print(c(paste0(grocery_data$addr.housenumber[[20]], " ", grocery_data$addr.street[[20]])))
print(snap_data$Store_Street_Address[[10]])
grocery_data$accepts_snap <- NA
for (i in 1:length(grocery_data$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(grocery_data$addr.housenumber[[i]],
grocery_data$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
grocery_data$accepts_snap[[i]] <- 1
break
} else {
grocery_data$accepts_snap[[i]] <- 0
}
}
}
st_write(grocery_data, "groceries_snap.geojson")
# iterate over drinks and sweets
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$features)) {
snap_store <- snap_data$features[[j]]
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_store$attributes$Store_Street_Address)
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
View(grocery_data)
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$features)) {
snap_store <- snap_data$features[[j]]
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_store$attributes$Store_Street_Address)
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$features)) {
snap_store <- snap_data$features[[j]]
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_store$attributes$Store_Street_Address)
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
View(drinks_sweets)
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$features)) {
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
st_write(drinks_sweets, "drinks_sweets_snap.geojson")
match_retailers <- function(street_number, street_name, address) {
street_name <- gsub("Road", "Rd", street_name)
street_name <- gsub("Avenue", "Ave", street_name)
street_name <- gsub("Expressway", "Expy", street_name)
street_name <- gsub("Street", "St", street_name)
street_name <- gsub("Lane", "Ln", street_name)
street_name <- gsub("Boulevard", "Blvd", street_name)
street_name <- gsub("Highway", "Hwy", street_name)
street_name <- gsub("North", "N", street_name)
street_name <- gsub("South", "S", street_name)
street_name <- gsub("West", "W", street_name)
street_name <- gsub("East", "E", street_name)
print(street_name)
address <- gsub("Road", "Rd", address)
address <- gsub("Avenue", "Ave", address)
address <- gsub("Expressway", "Expy", address)
address <- gsub("Street", "St", address)
address <- gsub("Lane", "Ln", address)
address <- gsub("Boulevard", "Blvd", address)
address <- gsub("Highway", "Hwy", address)
address <- gsub("North", "N", address)
address <- gsub("South", "S", address)
address <- gsub("West", "W", address)
address <- gsub("East", "E", address)
print(address)
if (c(paste0(street_number, " ", str_to_lower(street_name))) == str_to_lower(address)) {
return(1)
} else {
return(0)
}
}
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
st_write(drinks_sweets, "drinks_sweets_snap.geojson")
append=FALSE
drinks_sweets <- st_read("drinks_sweets.geojson")
for (i in 1:length(drinks_sweets$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(drinks_sweets$addr.housenumber[[i]],
drinks_sweets$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
drinks_sweets$accepts_snap <- 1
break
} else {
drinks_sweets$accepts_snap <- 0
}
}
}
st_write(drinks_sweets, "drinks_sweets_snap.geojson")
farm <- st_read("farm.geojson")
farm$accepts_snap <- NA
for (i in 1:length(farm$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(farm$addr.housenumber[[i]],
farm$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
farm$accepts_snap[[i]] <- 1
break
} else {
farm$accepts_snap[[i]] <- 0
}
}
}
st_write(farm, "farm_snap.geojson")
restaurants <- st_read("restaurants.geojson")
restaurants$accepts_snap <- NA
for (i in 1:length(restaurants$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(restaurants$addr.housenumber[[i]],
restaurants$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
restaurants$accepts_snap[[i]] <- 1
break
} else {
restaurants$accepts_snap[[i]] <- 0
}
}
}
st_write(restaurants, "restaurants_snap.geojson")
specialty <- st_read("specialty.geojson")
specialty$accepts_snap <- NA
for (i in 1:length(specialty$id)) {
for (j in 1:length(snap_data$Record_ID)) {
snap_store <- snap_data$features[[j]]
distance <- match_retailers(specialty$addr.housenumber[[i]],
specialty$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
specialty$accepts_snap[[i]] <- 1
break
} else {
specialty$accepts_snap[[i]] <- 0
}
}
}
st_write(misc, "specialty_snap.geojson")
specialty <- st_read("specialty.geojson")
specialty$accepts_snap <- NA
for (i in 1:length(specialty$id)) {
for (j in 1:length(snap_data$Record_ID)) {
snap_store <- snap_data$features[[j]]
distance <- match_retailers(specialty$addr.housenumber[[i]],
specialty$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
specialty$accepts_snap[[i]] <- 1
break
} else {
specialty$accepts_snap[[i]] <- 0
}
}
}
st_write(specialty, "specialty_snap.geojson")
misc <- st_read("miscellaneous.geojson")
misc$accepts_snap <- NA
for (i in 1:length(misc$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(misc$addr.housenumber[[i]],
misc$addr.housenumber[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
misc$accepts_snap[[i]] <- 1
break
} else {
misc$accepts_snap[[i]] <- 0
}
}
}
st_write(misc, "miscellaneous_snap.geojson")
misc <- st_read("miscellaneous.geojson")
misc$accepts_snap <- NA
for (i in 1:length(misc$id)) {
for (j in 1:length(snap_data$Record_ID)) {
distance <- match_retailers(misc$addr.housenumber[[i]],
misc$addr.street[[i]],
snap_data$Store_Street_Address[[j]])
if (distance == 1) {
misc$accepts_snap[[i]] <- 1
break
} else {
misc$accepts_snap[[i]] <- 0
}
}
}
st_write(misc, "miscellaneous_snap.geojson")
